---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: jhub-standard-gp2
  annotations:
    storageclass.kubernetes.io/is-default-class: "true"
parameters:
  type: gp2
  fsType: ext4
provisioner: kubernetes.io/aws-ebs
reclaimPolicy: Delete
volumeBindingMode: Immediate
allowVolumeExpansion: true

---
apiVersion: helm.fluxcd.io/v1
kind: HelmRelease
metadata:
  name: jupyterhub
  namespace: sandbox
  annotations:
    fluxcd.io/ignore: false   # temporarily make Flux ignore a manifest if set to true
    fluxcd.io/automated: false  # automation is not working. turn on if it's fixed
spec:
  releaseName: jupyterhub
  chart:
    # Helm Charts: https://github.com/jupyterhub/helm-chart
    # Source Repository: https://github.com/jupyterhub/jupyterhub
    # https://github.com/jupyterhub/zero-to-jupyterhub-k8s/blob/0.9.0-beta.3/jupyterhub/values.yaml
    repository: https://jupyterhub.github.io/helm-chart/
    name: jupyterhub
    version: 0.9.0-beta.3   # Use Development Release: https://jupyterhub.github.io/helm-chart/#development-releases-jupyterhub
  valueFileSecrets:
  - name: jupyterhub
  values:
    hub:
      #cookieSecret - Injected by Flux
      # imagePullPolicy: Always
      image:
        name: jupyterhub/k8s-hub
        tag: '0.9.0-beta.3'
      pdb:
        enabled: false
        minAvailable: 0
#      Injected by Flux - using secrets
#      annotations:
#        iam.amazonaws.com/role: ${role_name}
      extraConfig:
        spawner: |
          #!/usr/bin/env python3

          import json
          import os
          import sys
          import base64
          import time
          import requests
          from jupyterhub.handlers import LogoutHandler
          from tornado import web
          from kubernetes import client, config
          # install 'cognitojwt' packages to hub container - require to validate user claim
          try:
            import cognitojwt
          except ImportError:
            import subprocess
            subprocess.call([sys.executable, "-m", "pip", "install", "wheel"])
            subprocess.call([sys.executable, "-m", "pip", "install", "--user", "cognitojwt[sync]"])
          finally:
            sys.path.append(os.path.expanduser('~') + "/.local/lib/python3.6/site-packages")
            import cognitojwt

          def enum(**enums):
            return type('Enum', (), enums)

          async def verify_claims(self, user):
            # Retrieve user authentication info, decode, and verify claims
            try:
              auth_state = await user.get_auth_state()
              # self.log.info("auth_state: {}".format(auth_state))
              if auth_state is None:
                raise ValueError("auth_state is empty")

              verified_claims = cognitojwt.decode(
                auth_state['access_token'],
                os.getenv('AWS_DEFAULT_REGION', 'ap-southeast-2'),
                os.getenv('JUPYTERHUB_USERPOOL_ID'),
                testmode=False  # Enable token expiration check
              )
              return verified_claims
            except cognitojwt.CognitoJWTException as err:
              self.log.error("Cliam verification issue: {}".format(err))
              raise web.HTTPError(401, "Session is expired!")

          async def custom_options_form(self):
            self.log.info("logged in user: %s", self.user.name)
            os.environ['PROFILE_TYPE'] = 'default-profile'
            # setup default profile_list for all users
            default_profile_list = [
              {
                'default': True,
                'display_name': 'AU: Standard environment',
                'description': 'Limited user, 2 Cores, 16G Memory Read access to database and files',
              },
            ]
            self.profile_list = default_profile_list

            cognito_user_groups = enum(
              DEVELOPMENT='dev-group',
              INTERNAL='internal-group',
              TRUSTED='trusted-group',
              DEFAULT='default-group',
              NONE='None'
            )

            try:
              # Read user access token to collect user group info
              verified_claims = await verify_claims(self, self.user)
              user_group_info = verified_claims.get('cognito:groups', [])
              self.log.info("%s user belongs to group(s): %s", self.user.name, (','.join(user_group_info)))

              # Use logic here to decide how to configure user profile_list based on user-group
              if cognito_user_groups.DEVELOPMENT in user_group_info:
                # configure your profile_list for 'dev-group' user
                os.environ['PROFILE_TYPE'] = 'dev-profile'
                dev_profile_list = [
                  {
                    'default': False,
                    'display_name': 'Dev Environment: [latest]',
                    'description': 'Unstable image based off https://github.com/GeoscienceAustralia/dea-sandbox master branch',
                    'kubespawner_override': {
                      'image': 'geoscienceaustralia/sandbox:latest',
                      'image_pull_policy': 'Always'
                    }
                  },
                  {
                    'default': False,
                    'display_name': 'Dev Environment: [sudo-latest]',
                    'description': 'Unstable image based off https://github.com/GeoscienceAustralia/dea-sandbox master branch with sudo',
                    'kubespawner_override': {
                      'image': 'geoscienceaustralia/sandbox:sudo-latest',
                      'image_pull_policy': 'Always'
                    }
                  }
                ]
                # profile_list = default_profile_list + dev_profile_list
                self.profile_list.extend(dev_profile_list)
              if cognito_user_groups.INTERNAL in user_group_info:
                # configure your profile_list for 'internal-group' user
                os.environ['PROFILE_TYPE'] = 'internal-profile'
                self.log.info("user belongs to {} cognito group".format(cognito_user_groups.INTERNAL))
              if cognito_user_groups.TRUSTED in user_group_info:
                # configure your profile_list for 'trusted-group' user
                os.environ['PROFILE_TYPE'] = 'trusted-profile'
                self.log.info("user belongs to {} cognito group".format(cognito_user_groups.TRUSTED))

              # Return options_form - Let KubeSpawner inspect profile_list and decide what to return
              return self._options_form_default()
            except (TypeError, IndexError, ValueError, KeyError) as err:
              self.log.error("Syntaxt error: {}".format(err))
              raise web.HTTPError(400, "Something went wrong. Coud not load profiles")

          # Set the log level by value or name.
          c.JupyterHub.log_level = 'DEBUG'

          # Enable debug-logging of the single-user server
          c.Spawner.debug = True

          # Enable debug-logging of the single-user server
          c.LocalProcessSpawner.debug = True
          c.Spawner.cmd = ['jupyter-labhub']

          # Override spawner timeout - in seconds
          c.KubeSpawner.start_timeout = 600

          # Override options_form
          c.KubeSpawner.options_form = custom_options_form

#      Injected by Flux - using secrets
#      extraEnv:
#        JUPYTERHUB_USERPOOL_ID: ${jhub_userpool_id}
#        AWS_DEFAULT_REGION: ${region}
#        AWSCOGNITO_DOMAIN: ${jhub_userpool_domain}.auth.${region}.amazoncognito.com
#        OAUTH2_AUTHORIZE_URL: https://${jhub_userpool_domain}.auth.${region}.amazoncognito.com/oauth2/authorize
#        OAUTH2_TOKEN_URL: https://${jhub_userpool_domain}.auth.${region}.amazoncognito.com/oauth2/token
#    Injected by Flux - using secrets
#    auth:
#      type: custom
#      state:
#        enabled: True
#        cryptoKey: 356e9462b05e983c6ffcced3702b9b78c5859a22fd6c9380513701ed8e075184 # Replace
#      custom:
#        className: oauthenticator.awscognito.AWSCognitoAuthenticator
#        config:
#          login_service: "email"
#          client_id: ${jhub_auth_client_id}
#          client_secret: ${jhub_auth_client_secret}
#          token_url: https://${jhub_userpool_domain}.auth.${region}.amazoncognito.com/oauth2/token
#          userdata_url: https://${jhub_userpool_domain}.auth.${region}.amazoncognito.com/oauth2/userInfo
#          oauth_callback_url: https://${sandbox_host_name}/oauth_callback
#          oauth_logout_redirect_url: https://${sandbox_host_name}

    proxy:
      #secretToken - Injected by Flux
      nginx:
        image:
          name: quay.io/kubernetes-ingress-controller/nginx-ingress-controller
          tag: 0.27.0
      pdb:
        enabled: false
        minAvailable: 0

    scheduling:
      userScheduler:
        enabled: true
      podPriority:
        enabled: true
      userPlaceholder:
        enabled: true
        replicas: 1
      userPods:
        nodeAffinity:
          matchNodePurpose: require
    cull:
      enabled: true
      timeout: 3600
      every: 300
    singleuser:
#      extraAnnotations:
#        iam.amazonaws.com/role: ${role_name}
      defaultUrl: "/lab"
      memory:
        limit: 16G
      cpu:
        limit: 2
      cloudMetadata:
        enabled: true
      image:
        # Docker Hub: https://hub.docker.com/r/geoscienceaustralia/sandbox
        # Source Repository: https://github.com/geoscienceaustralia/dea-sandbox
        name: geoscienceaustralia/sandbox
        tag: "0.0.5"
      extraEnv:
        DB_PORT: "5432"
        #DB_PASSWORD - Injected by Flux
        #DB_USERNAME - Injected by Flux
        #DB_DATABASE - Injected by Flux
        #DB_HOSTNAME - Injected by Flux
        DATACUBE_CONFIG_PATH: "/conf/datacube.conf"
    storage:
      storageClass: jhub-standard-gp2
      extraVolumes:
        - name: notebooks
          emptyDir: {}
        - name: jupyter-notebook-config
          configMap:
            name: jupyter-notebook-config
      extraVolumeMounts:
        - name: notebooks
          mountPath: /notebooks
        - name: jupyter-notebook-config
          mountPath: /etc/jupyter/jupyter_notebook_config.py
          subPath: jupyter_notebook_config.py
#    Injected by Flux - using secrets
#    ingress:
#      enabled: true
#      annotations:
#        kubernetes.io/tls-acme: "true"
#        kubernetes.io/ingress.class: alb
#        alb.ingress.kubernetes.io/healthcheck-path: /hub/login
#        alb.ingress.kubernetes.io/healthcheck-port: traffic-port
#        alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS":443}]'
#        alb.ingress.kubernetes.io/scheme: internet-facing
#        alb.ingress.kubernetes.io/target-type: instance
#        alb.ingress.kubernetes.io/certificate-arn: ${cert_arn}
#        alb.ingress.kubernetes.io/waf-acl-id: ${waf_acl_id}
#      hosts:
#        - ${sandbox_host_name}
#      pathSuffix: "*"